# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TestUserArgs', 'TestUser']

@pulumi.input_type
class TestUserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 user_pool_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a TestUser resource.
        :param pulumi.Input[str] email: The email of the test user. Throws an error if the user already exists.
        :param pulumi.Input[str] user_pool_id: The ID of the user pool where the test user is created. UserPool must exist.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "user_pool_id", user_pool_id)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The email of the test user. Throws an error if the user already exists.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="userPoolId")
    def user_pool_id(self) -> pulumi.Input[str]:
        """
        The ID of the user pool where the test user is created. UserPool must exist.
        """
        return pulumi.get(self, "user_pool_id")

    @user_pool_id.setter
    def user_pool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool_id", value)


class TestUser(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 user_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a TestUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The email of the test user. Throws an error if the user already exists.
        :param pulumi.Input[str] user_pool_id: The ID of the user pool where the test user is created. UserPool must exist.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TestUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TestUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TestUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TestUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 user_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TestUserArgs.__new__(TestUserArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if user_pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_pool_id'")
            __props__.__dict__["user_pool_id"] = user_pool_id
            __props__.__dict__["password"] = None
        super(TestUser, __self__).__init__(
            'gotiac:index:TestUser',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The temporary password of the test user. Make sure to destroy the test user after each test run.
        """
        return pulumi.get(self, "password")

