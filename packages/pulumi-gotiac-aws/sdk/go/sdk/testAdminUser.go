// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdk

import (
	"context"
	"reflect"

	"errors"
	"github.com/gothub-team/got/packages/pulumi-gotiac-aws/sdk/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TestAdminUser struct {
	pulumi.ResourceState

	// The temporary password of the test admin user. Make sure to destroy the test admin user after each test run.
	Password pulumi.StringOutput `pulumi:"password"`
}

// NewTestAdminUser registers a new resource with the given unique name, arguments, and options.
func NewTestAdminUser(ctx *pulumi.Context,
	name string, args *TestAdminUserArgs, opts ...pulumi.ResourceOption) (*TestAdminUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TestAdminUser
	err := ctx.RegisterRemoteComponentResource("gotiac:index:TestAdminUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type testAdminUserArgs struct {
	// The email of the test admin user. Throws an error if the user already exists.
	Email string `pulumi:"email"`
	// The ID of the user pool where the test admin user is created. UserPool must exist.
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a TestAdminUser resource.
type TestAdminUserArgs struct {
	// The email of the test admin user. Throws an error if the user already exists.
	Email pulumi.StringInput
	// The ID of the user pool where the test admin user is created. UserPool must exist.
	UserPoolId pulumi.StringInput
}

func (TestAdminUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*testAdminUserArgs)(nil)).Elem()
}

type TestAdminUserInput interface {
	pulumi.Input

	ToTestAdminUserOutput() TestAdminUserOutput
	ToTestAdminUserOutputWithContext(ctx context.Context) TestAdminUserOutput
}

func (*TestAdminUser) ElementType() reflect.Type {
	return reflect.TypeOf((**TestAdminUser)(nil)).Elem()
}

func (i *TestAdminUser) ToTestAdminUserOutput() TestAdminUserOutput {
	return i.ToTestAdminUserOutputWithContext(context.Background())
}

func (i *TestAdminUser) ToTestAdminUserOutputWithContext(ctx context.Context) TestAdminUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestAdminUserOutput)
}

// TestAdminUserArrayInput is an input type that accepts TestAdminUserArray and TestAdminUserArrayOutput values.
// You can construct a concrete instance of `TestAdminUserArrayInput` via:
//
//	TestAdminUserArray{ TestAdminUserArgs{...} }
type TestAdminUserArrayInput interface {
	pulumi.Input

	ToTestAdminUserArrayOutput() TestAdminUserArrayOutput
	ToTestAdminUserArrayOutputWithContext(context.Context) TestAdminUserArrayOutput
}

type TestAdminUserArray []TestAdminUserInput

func (TestAdminUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TestAdminUser)(nil)).Elem()
}

func (i TestAdminUserArray) ToTestAdminUserArrayOutput() TestAdminUserArrayOutput {
	return i.ToTestAdminUserArrayOutputWithContext(context.Background())
}

func (i TestAdminUserArray) ToTestAdminUserArrayOutputWithContext(ctx context.Context) TestAdminUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestAdminUserArrayOutput)
}

// TestAdminUserMapInput is an input type that accepts TestAdminUserMap and TestAdminUserMapOutput values.
// You can construct a concrete instance of `TestAdminUserMapInput` via:
//
//	TestAdminUserMap{ "key": TestAdminUserArgs{...} }
type TestAdminUserMapInput interface {
	pulumi.Input

	ToTestAdminUserMapOutput() TestAdminUserMapOutput
	ToTestAdminUserMapOutputWithContext(context.Context) TestAdminUserMapOutput
}

type TestAdminUserMap map[string]TestAdminUserInput

func (TestAdminUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TestAdminUser)(nil)).Elem()
}

func (i TestAdminUserMap) ToTestAdminUserMapOutput() TestAdminUserMapOutput {
	return i.ToTestAdminUserMapOutputWithContext(context.Background())
}

func (i TestAdminUserMap) ToTestAdminUserMapOutputWithContext(ctx context.Context) TestAdminUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestAdminUserMapOutput)
}

type TestAdminUserOutput struct{ *pulumi.OutputState }

func (TestAdminUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestAdminUser)(nil)).Elem()
}

func (o TestAdminUserOutput) ToTestAdminUserOutput() TestAdminUserOutput {
	return o
}

func (o TestAdminUserOutput) ToTestAdminUserOutputWithContext(ctx context.Context) TestAdminUserOutput {
	return o
}

// The temporary password of the test admin user. Make sure to destroy the test admin user after each test run.
func (o TestAdminUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *TestAdminUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

type TestAdminUserArrayOutput struct{ *pulumi.OutputState }

func (TestAdminUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TestAdminUser)(nil)).Elem()
}

func (o TestAdminUserArrayOutput) ToTestAdminUserArrayOutput() TestAdminUserArrayOutput {
	return o
}

func (o TestAdminUserArrayOutput) ToTestAdminUserArrayOutputWithContext(ctx context.Context) TestAdminUserArrayOutput {
	return o
}

func (o TestAdminUserArrayOutput) Index(i pulumi.IntInput) TestAdminUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TestAdminUser {
		return vs[0].([]*TestAdminUser)[vs[1].(int)]
	}).(TestAdminUserOutput)
}

type TestAdminUserMapOutput struct{ *pulumi.OutputState }

func (TestAdminUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TestAdminUser)(nil)).Elem()
}

func (o TestAdminUserMapOutput) ToTestAdminUserMapOutput() TestAdminUserMapOutput {
	return o
}

func (o TestAdminUserMapOutput) ToTestAdminUserMapOutputWithContext(ctx context.Context) TestAdminUserMapOutput {
	return o
}

func (o TestAdminUserMapOutput) MapIndex(k pulumi.StringInput) TestAdminUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TestAdminUser {
		return vs[0].(map[string]*TestAdminUser)[vs[1].(string)]
	}).(TestAdminUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TestAdminUserInput)(nil)).Elem(), &TestAdminUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestAdminUserArrayInput)(nil)).Elem(), TestAdminUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestAdminUserMapInput)(nil)).Elem(), TestAdminUserMap{})
	pulumi.RegisterOutputType(TestAdminUserOutput{})
	pulumi.RegisterOutputType(TestAdminUserArrayOutput{})
	pulumi.RegisterOutputType(TestAdminUserMapOutput{})
}
