// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdk

import (
	"context"
	"reflect"

	"errors"
	"github.com/gothub-team/got/packages/pulumi-gotiac-aws/sdk/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Lambda struct {
	pulumi.ResourceState

	// The ARN of the Lambda function.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Name of the Lambda function.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewLambda registers a new resource with the given unique name, arguments, and options.
func NewLambda(ctx *pulumi.Context,
	name string, args *LambdaArgs, opts ...pulumi.ResourceOption) (*Lambda, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CodePath == nil {
		return nil, errors.New("invalid value for required argument 'CodePath'")
	}
	if args.Handler == nil {
		return nil, errors.New("invalid value for required argument 'Handler'")
	}
	if args.PolicyArns == nil {
		return nil, errors.New("invalid value for required argument 'PolicyArns'")
	}
	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Lambda
	err := ctx.RegisterRemoteComponentResource("gotiac:index:Lambda", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type lambdaArgs struct {
	// The path to a .zip file containing your deployment package.
	CodePath string `pulumi:"codePath"`
	// The path to the handler in the deployment package.
	Handler string `pulumi:"handler"`
	// The amount of memory in MB your Lambda Function can use at runtime.
	MemorySize *float64 `pulumi:"memorySize"`
	// The ARNs of the policies that are attached to the Lambda function.
	PolicyArns []string `pulumi:"policyArns"`
	// The runtime environment for the Lambda function.
	Runtime string `pulumi:"runtime"`
}

// The set of arguments for constructing a Lambda resource.
type LambdaArgs struct {
	// The path to a .zip file containing your deployment package.
	CodePath pulumi.StringInput
	// The path to the handler in the deployment package.
	Handler pulumi.StringInput
	// The amount of memory in MB your Lambda Function can use at runtime.
	MemorySize pulumi.Float64PtrInput
	// The ARNs of the policies that are attached to the Lambda function.
	PolicyArns pulumi.StringArrayInput
	// The runtime environment for the Lambda function.
	Runtime pulumi.StringInput
}

func (LambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lambdaArgs)(nil)).Elem()
}

type LambdaInput interface {
	pulumi.Input

	ToLambdaOutput() LambdaOutput
	ToLambdaOutputWithContext(ctx context.Context) LambdaOutput
}

func (*Lambda) ElementType() reflect.Type {
	return reflect.TypeOf((**Lambda)(nil)).Elem()
}

func (i *Lambda) ToLambdaOutput() LambdaOutput {
	return i.ToLambdaOutputWithContext(context.Background())
}

func (i *Lambda) ToLambdaOutputWithContext(ctx context.Context) LambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaOutput)
}

// LambdaArrayInput is an input type that accepts LambdaArray and LambdaArrayOutput values.
// You can construct a concrete instance of `LambdaArrayInput` via:
//
//	LambdaArray{ LambdaArgs{...} }
type LambdaArrayInput interface {
	pulumi.Input

	ToLambdaArrayOutput() LambdaArrayOutput
	ToLambdaArrayOutputWithContext(context.Context) LambdaArrayOutput
}

type LambdaArray []LambdaInput

func (LambdaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lambda)(nil)).Elem()
}

func (i LambdaArray) ToLambdaArrayOutput() LambdaArrayOutput {
	return i.ToLambdaArrayOutputWithContext(context.Background())
}

func (i LambdaArray) ToLambdaArrayOutputWithContext(ctx context.Context) LambdaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaArrayOutput)
}

// LambdaMapInput is an input type that accepts LambdaMap and LambdaMapOutput values.
// You can construct a concrete instance of `LambdaMapInput` via:
//
//	LambdaMap{ "key": LambdaArgs{...} }
type LambdaMapInput interface {
	pulumi.Input

	ToLambdaMapOutput() LambdaMapOutput
	ToLambdaMapOutputWithContext(context.Context) LambdaMapOutput
}

type LambdaMap map[string]LambdaInput

func (LambdaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lambda)(nil)).Elem()
}

func (i LambdaMap) ToLambdaMapOutput() LambdaMapOutput {
	return i.ToLambdaMapOutputWithContext(context.Background())
}

func (i LambdaMap) ToLambdaMapOutputWithContext(ctx context.Context) LambdaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaMapOutput)
}

type LambdaOutput struct{ *pulumi.OutputState }

func (LambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lambda)(nil)).Elem()
}

func (o LambdaOutput) ToLambdaOutput() LambdaOutput {
	return o
}

func (o LambdaOutput) ToLambdaOutputWithContext(ctx context.Context) LambdaOutput {
	return o
}

// The ARN of the Lambda function.
func (o LambdaOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Lambda) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The Name of the Lambda function.
func (o LambdaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Lambda) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type LambdaArrayOutput struct{ *pulumi.OutputState }

func (LambdaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lambda)(nil)).Elem()
}

func (o LambdaArrayOutput) ToLambdaArrayOutput() LambdaArrayOutput {
	return o
}

func (o LambdaArrayOutput) ToLambdaArrayOutputWithContext(ctx context.Context) LambdaArrayOutput {
	return o
}

func (o LambdaArrayOutput) Index(i pulumi.IntInput) LambdaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lambda {
		return vs[0].([]*Lambda)[vs[1].(int)]
	}).(LambdaOutput)
}

type LambdaMapOutput struct{ *pulumi.OutputState }

func (LambdaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lambda)(nil)).Elem()
}

func (o LambdaMapOutput) ToLambdaMapOutput() LambdaMapOutput {
	return o
}

func (o LambdaMapOutput) ToLambdaMapOutputWithContext(ctx context.Context) LambdaMapOutput {
	return o
}

func (o LambdaMapOutput) MapIndex(k pulumi.StringInput) LambdaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lambda {
		return vs[0].(map[string]*Lambda)[vs[1].(string)]
	}).(LambdaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaInput)(nil)).Elem(), &Lambda{})
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaArrayInput)(nil)).Elem(), LambdaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaMapInput)(nil)).Elem(), LambdaMap{})
	pulumi.RegisterOutputType(LambdaOutput{})
	pulumi.RegisterOutputType(LambdaArrayOutput{})
	pulumi.RegisterOutputType(LambdaMapOutput{})
}
