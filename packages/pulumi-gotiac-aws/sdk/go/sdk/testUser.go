// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdk

import (
	"context"
	"reflect"

	"errors"
	"github.com/gothub-team/got/packages/pulumi-gotiac-aws/sdk/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TestUser struct {
	pulumi.ResourceState

	// The temporary password of the test user. Make sure to destroy the test user after each test run.
	Password pulumi.StringOutput `pulumi:"password"`
}

// NewTestUser registers a new resource with the given unique name, arguments, and options.
func NewTestUser(ctx *pulumi.Context,
	name string, args *TestUserArgs, opts ...pulumi.ResourceOption) (*TestUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TestUser
	err := ctx.RegisterRemoteComponentResource("gotiac:index:TestUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type testUserArgs struct {
	// The email of the test user. Throws an error if the user already exists.
	Email string `pulumi:"email"`
	// The ID of the user pool where the test user is created. UserPool must exist.
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a TestUser resource.
type TestUserArgs struct {
	// The email of the test user. Throws an error if the user already exists.
	Email pulumi.StringInput
	// The ID of the user pool where the test user is created. UserPool must exist.
	UserPoolId pulumi.StringInput
}

func (TestUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*testUserArgs)(nil)).Elem()
}

type TestUserInput interface {
	pulumi.Input

	ToTestUserOutput() TestUserOutput
	ToTestUserOutputWithContext(ctx context.Context) TestUserOutput
}

func (*TestUser) ElementType() reflect.Type {
	return reflect.TypeOf((**TestUser)(nil)).Elem()
}

func (i *TestUser) ToTestUserOutput() TestUserOutput {
	return i.ToTestUserOutputWithContext(context.Background())
}

func (i *TestUser) ToTestUserOutputWithContext(ctx context.Context) TestUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestUserOutput)
}

// TestUserArrayInput is an input type that accepts TestUserArray and TestUserArrayOutput values.
// You can construct a concrete instance of `TestUserArrayInput` via:
//
//	TestUserArray{ TestUserArgs{...} }
type TestUserArrayInput interface {
	pulumi.Input

	ToTestUserArrayOutput() TestUserArrayOutput
	ToTestUserArrayOutputWithContext(context.Context) TestUserArrayOutput
}

type TestUserArray []TestUserInput

func (TestUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TestUser)(nil)).Elem()
}

func (i TestUserArray) ToTestUserArrayOutput() TestUserArrayOutput {
	return i.ToTestUserArrayOutputWithContext(context.Background())
}

func (i TestUserArray) ToTestUserArrayOutputWithContext(ctx context.Context) TestUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestUserArrayOutput)
}

// TestUserMapInput is an input type that accepts TestUserMap and TestUserMapOutput values.
// You can construct a concrete instance of `TestUserMapInput` via:
//
//	TestUserMap{ "key": TestUserArgs{...} }
type TestUserMapInput interface {
	pulumi.Input

	ToTestUserMapOutput() TestUserMapOutput
	ToTestUserMapOutputWithContext(context.Context) TestUserMapOutput
}

type TestUserMap map[string]TestUserInput

func (TestUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TestUser)(nil)).Elem()
}

func (i TestUserMap) ToTestUserMapOutput() TestUserMapOutput {
	return i.ToTestUserMapOutputWithContext(context.Background())
}

func (i TestUserMap) ToTestUserMapOutputWithContext(ctx context.Context) TestUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestUserMapOutput)
}

type TestUserOutput struct{ *pulumi.OutputState }

func (TestUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestUser)(nil)).Elem()
}

func (o TestUserOutput) ToTestUserOutput() TestUserOutput {
	return o
}

func (o TestUserOutput) ToTestUserOutputWithContext(ctx context.Context) TestUserOutput {
	return o
}

// The temporary password of the test user. Make sure to destroy the test user after each test run.
func (o TestUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *TestUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

type TestUserArrayOutput struct{ *pulumi.OutputState }

func (TestUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TestUser)(nil)).Elem()
}

func (o TestUserArrayOutput) ToTestUserArrayOutput() TestUserArrayOutput {
	return o
}

func (o TestUserArrayOutput) ToTestUserArrayOutputWithContext(ctx context.Context) TestUserArrayOutput {
	return o
}

func (o TestUserArrayOutput) Index(i pulumi.IntInput) TestUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TestUser {
		return vs[0].([]*TestUser)[vs[1].(int)]
	}).(TestUserOutput)
}

type TestUserMapOutput struct{ *pulumi.OutputState }

func (TestUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TestUser)(nil)).Elem()
}

func (o TestUserMapOutput) ToTestUserMapOutput() TestUserMapOutput {
	return o
}

func (o TestUserMapOutput) ToTestUserMapOutputWithContext(ctx context.Context) TestUserMapOutput {
	return o
}

func (o TestUserMapOutput) MapIndex(k pulumi.StringInput) TestUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TestUser {
		return vs[0].(map[string]*TestUser)[vs[1].(string)]
	}).(TestUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TestUserInput)(nil)).Elem(), &TestUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestUserArrayInput)(nil)).Elem(), TestUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestUserMapInput)(nil)).Elem(), TestUserMap{})
	pulumi.RegisterOutputType(TestUserOutput{})
	pulumi.RegisterOutputType(TestUserArrayOutput{})
	pulumi.RegisterOutputType(TestUserMapOutput{})
}
