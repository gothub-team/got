// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Api extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'gotiac:index:Api';

    /**
     * Returns true if the given object is an instance of Api.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Api {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Api.__pulumiType;
    }

    /**
     * The endpoint of the API.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public /*out*/ readonly pullEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly pullFunction!: pulumi.Output<string>;
    public /*out*/ readonly pullInvokePolicyArn!: pulumi.Output<string>;
    public /*out*/ readonly pushEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly pushFunction!: pulumi.Output<string>;
    public /*out*/ readonly pushInvokePolicyArn!: pulumi.Output<string>;

    /**
     * Create a Api resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.codePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'codePath'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.userPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPoolId'");
            }
            resourceInputs["bucketEdgesName"] = args ? args.bucketEdgesName : undefined;
            resourceInputs["bucketNodesName"] = args ? args.bucketNodesName : undefined;
            resourceInputs["bucketReverseEdgesName"] = args ? args.bucketReverseEdgesName : undefined;
            resourceInputs["bucketRightsAdminName"] = args ? args.bucketRightsAdminName : undefined;
            resourceInputs["bucketRightsOwnerName"] = args ? args.bucketRightsOwnerName : undefined;
            resourceInputs["bucketRightsReadName"] = args ? args.bucketRightsReadName : undefined;
            resourceInputs["bucketRightsWriteName"] = args ? args.bucketRightsWriteName : undefined;
            resourceInputs["codePath"] = args ? args.codePath : undefined;
            resourceInputs["policyArns"] = args ? args.policyArns : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["userPoolId"] = args ? args.userPoolId : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["pullEndpoint"] = undefined /*out*/;
            resourceInputs["pullFunction"] = undefined /*out*/;
            resourceInputs["pullInvokePolicyArn"] = undefined /*out*/;
            resourceInputs["pushEndpoint"] = undefined /*out*/;
            resourceInputs["pushFunction"] = undefined /*out*/;
            resourceInputs["pushInvokePolicyArn"] = undefined /*out*/;
        } else {
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["pullEndpoint"] = undefined /*out*/;
            resourceInputs["pullFunction"] = undefined /*out*/;
            resourceInputs["pullInvokePolicyArn"] = undefined /*out*/;
            resourceInputs["pushEndpoint"] = undefined /*out*/;
            resourceInputs["pushFunction"] = undefined /*out*/;
            resourceInputs["pushInvokePolicyArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Api.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Api resource.
 */
export interface ApiArgs {
    /**
     * The Name of the existing bucket for edge storage.
     */
    bucketEdgesName?: pulumi.Input<string>;
    /**
     * The Name of the existing bucket for node storage.
     */
    bucketNodesName?: pulumi.Input<string>;
    /**
     * The Name of the existing bucket for reverse edge storage.
     */
    bucketReverseEdgesName?: pulumi.Input<string>;
    /**
     * The Name of the existing bucket for admin right storage.
     */
    bucketRightsAdminName?: pulumi.Input<string>;
    /**
     * The Name of the existing bucket for owner right storage.
     */
    bucketRightsOwnerName?: pulumi.Input<string>;
    /**
     * The Name of the existing bucket for read right storage.
     */
    bucketRightsReadName?: pulumi.Input<string>;
    /**
     * The Name of the existing bucket for write right storage.
     */
    bucketRightsWriteName?: pulumi.Input<string>;
    /**
     * The path to the directory containing the deployment packages.
     */
    codePath: pulumi.Input<string>;
    /**
     * The ARNs of the policies that are attached to the Lambda function.
     */
    policyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The runtime environment for the Lambda function.
     */
    runtime: pulumi.Input<string>;
    /**
     * ID of the user pool.
     */
    userPoolId: pulumi.Input<string>;
}
